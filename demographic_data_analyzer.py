# -*- coding: utf-8 -*-
"""demographic_data_analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L5hwicuFeVbU-EfIm-XrahsUr74_li-c
"""

import pandas as pd
def load_and_analyze_data(csv_file='adultdata.csv'):
    # Cargar el archivo CSV en un DataFrame de pandas
    df = pd.read_csv(csv_file) #Changed adultdata.csv to csv_file
    # Llamar a la función que realiza el análisis
    analysis_results = demographic_analysis(df)

    return analysis_results

  # Función que realiza el análisis demográfico
def demographic_analysis(df):
    # 1. Número de personas por raza
    race_counts = df['race'].value_counts()

    # 2. Edad media de los hombres
    mean_age_men = round(df[df['sex'] == 'Male']['age'].mean(), 1)

    # 3. Porcentaje de personas con licenciatura
    percentage_bachelors = round((df['education'] == 'Bachelors').mean() * 100, 1)

    # 4. Porcentaje de personas con educación avanzada que ganan más de $50,000
    higher_education = df[df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    higher_education_rich = round((higher_education['salary'] == '>50K').mean() * 100, 1)

    # 5. Porcentaje de personas sin educación avanzada que ganan más de $50,000
    lower_education = df[~df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    lower_education_rich = round((lower_education['salary'] == '>50K').mean() * 100, 1)

    # 6. Número mínimo de horas trabajadas por semana
    min_work_hours = df['hours-per-week'].min()

    # 7. Porcentaje de personas que trabajan el mínimo de horas y ganan más de $50,000
    min_workers = df[df['hours-per-week'] == min_work_hours]
    rich_percentage = round((min_workers['salary'] == '>50K').mean() * 100, 1)

    # 8. País con el mayor porcentaje de personas que ganan >50K
    countries_percentage = df[df['salary'] == '>50K'].groupby('native-country')['salary'].count() / df.groupby('native-country')['salary'].count() * 100
    highest_earning_country = countries_percentage.idxmax()
    highest_earning_country_percentage = round(countries_percentage.max(), 1)

    # 9. Ocupación más popular para quienes ganan >50K en India
    top_IN_occupation = df[(df['native-country'] == 'India') & (df['salary'] == '>50K')]['occupation'].value_counts().idxmax()

    return {
        'race_counts': race_counts,
        'mean_age_men': mean_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage': highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
csv_file_path = 'adultdata.csv' # Added definition for csv_file_path
results = load_and_analyze_data(csv_file_path)

# Mostrar resultados
for key, value in results.items():
    print(f"{key}: {value}")

